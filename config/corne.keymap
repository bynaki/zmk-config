// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold and Tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };

        td_a: td_a {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_A";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LSHFT A>, <&kp A>;
        };

        td_s: td_s {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_S";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LALT S>, <&kp S>;
        };

        td_d: td_d {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_D";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LCTRL D>, <&kp D>;
        };

        td_f: td_f {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_F";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LGUI F>, <&kp F>;
        };

        td_j: td_j {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_J";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LGUI J>, <&kp J>;
        };

        td_k: td_k {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_K";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LCTRL K>, <&kp K>;
        };

        td_l: td_l {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LALT L>, <&kp L>;
        };

        td_sqt: td_sqt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht RSHIFT SQT>, <&kp SQT>;
        };

        td_bspc: td_bspc {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BSPC";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&lt 1 BSPC>, <&kp BSPC>;
        };

        td_down: td_down {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOWN";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LGUI DOWN>, <&kp DOWN>;
        };

        td_up: td_up {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_UP";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LCTRL UP>, <&kp UP>;
        };

        td_right: td_right {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RIGHT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht LALT RIGHT>, <&kp RIGHT>;
        };

        td_semi: td_semi {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMI";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&ht RSHIFT SEMI>, <&kp SEMI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &kp Q  &kp W  &kp E      &kp R         &kp T              &kp Y      &kp U     &kp I      &kp O    &kp P
  &td_a  &td_s  &td_d      &td_f         &kp G              &kp H      &td_j     &td_k      &td_l    &td_sqt
  &kp Z  &kp X  &kp C      &kp V         &kp B              &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH
                &kp GLOBE  &lt 2 ESCAPE  &mt RCTRL ENTER    &kp SPACE  &td_bspc  &kp GLOBE
            >;
        };

        Right {
            bindings = <
  &kp EXCL          &kp AT          &kp HASH        &kp LBRC       &kp RBRC     &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans
  &ht LSHIFT CARET  &ht LALT PRCNT  &ht LCTRL DLLR  &ht LGUI LPAR  &kp RPAR     &kp LEFT   &td_down   &td_up     &td_right  &td_semi
  &kp BSLH          &kp PIPE        &kp AMPS        &kp LBKT       &kp RBKT     &kp UNDER  &trans     &trans     &trans     &kp GRAVE
                                    &trans          &trans         &kp ENTER    &trans     &trans     &trans
            >;
        };

        Left {
            bindings = <
  &kp DEL         &kp F7       &kp F8        &kp F9       &trans     &kp PLUS   &kp N7       &kp N8        &kp N9       &kp ASTRK
  &ht LSHIFT TAB  &ht LALT F4  &ht LCTRL F5  &ht LGUI F6  &kp INS    &kp EQUAL  &ht LGUI N4  &ht LCTRL N5  &ht LALT N6  &ht RSHIFT COLON
  &caps_word      &kp F1       &kp F2        &kp F3       &kp F10    &kp MINUS  &kp N1       &kp N2        &kp N3       &kp TILDE
                               &trans        &trans       &trans     &trans     &kp N0       &trans
            >;
        };

        Function {
            bindings = <
  &sys_reset    &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &sys_reset
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans
  &bootloader   &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &bootloader
                              &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        func_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
